generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Announcement {
  id          Int          @id @default(autoincrement())
  title       String
  name        String
  age         Int
  about       String
  number      String
  email       String
  type        String
  state       String
  city        String
  description String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  imageUrl    String?
  socialLinks SocialLink[]
  genres      Genre[]      @relation("AnnouncementGenres")
  instruments Instrument[] @relation("AnnouncementInstruments")
  tags        Tags[]       @relation("AnnouncementTags")
}

model Instrument {
  id            Int            @id @default(autoincrement())
  name          String         @unique
  type          String
  announcements Announcement[] @relation("AnnouncementInstruments")
}

model Genre {
  id            Int            @id @default(autoincrement())
  name          String         @unique
  announcements Announcement[] @relation("AnnouncementGenres")
}

model SocialMedia {
  id         Int          @id @default(autoincrement())
  name       String       @unique
  SocialLink SocialLink[]
}

model SocialLink {
  id             Int          @id @default(autoincrement())
  url            String
  socialMediaId  Int
  announcementId Int
  announcement   Announcement @relation(fields: [announcementId], references: [id], onDelete: Cascade)
  socialMedia    SocialMedia  @relation(fields: [socialMediaId], references: [id], onDelete: Cascade)
}

model Tags {
  id    Int @id @default(autoincrement())
  name  String @unique
  announcement  Announcement[] @relation("AnnouncementTags")
}

model State {
  id    Int    @id @default(autoincrement())
  name  String @unique
}

model AppUser {
  id                Int                    @id @default(autoincrement())
  email             String                 @unique
  password          String
  name              String?
  surname           String?
  dateOfBirth       DateTime?
  country           String?
  state             String?
  isEmailConfirmed  Boolean                @default(false)
  createdAt         DateTime               @default(now())
  updatedAt         DateTime               @updatedAt
  confirmations     AppUserConfirmation[]
}

model AppUserConfirmation {
  id          String    @id @default(cuid())
  userId      Int
  user        AppUser   @relation(fields: [userId], references: [id], onDelete: Cascade)
  code        String
  type        ConfirmationType
  expiresAt   DateTime
  confirmedAt DateTime?
  createdAt   DateTime  @default(now())
}

enum ConfirmationType {
  EMAIL_VERIFICATION
  PASSWORD_RESET
}
